import asyncio
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.chat_action import ChatActionSender

from create_bot import bot
from db_hadler.db_class import Database
from db_hadler.database import db
from repositories import PlayerRepository

player_router = Router()


class Player(StatesGroup):
    login = State()
    players = State()


@player_router.callback_query(F.data == '–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫')
async def new_player(call: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É player –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    –ó–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞"""
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=call.from_user.id):
        await asyncio.sleep(1)
        await call.message.answer('–ö–∞–∫ —Ç–µ–±—è –≤–µ–ª–∏—á–∞—Ç—å, –¥—Ä—É–∂–æ–∫?', reply_markup=None)
    await state.set_state(Player.login.state)


@player_router.message(Command('new_player'))
async def new_player(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É player –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    –ó–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞"""
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        await asyncio.sleep(1)
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –≤–µ–ª–∏—á–∞—Ç—å, –¥—Ä—É–∂–æ–∫?', reply_markup=None)
    await state.set_state(Player.login.state)


@player_router.message(Player.login)
async def new_player_end(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É player –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        –í–Ω–µ—Å–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        await asyncio.sleep(2)



        async with db.session() as session:
            repo = PlayerRepository(session)
            player = await repo.get_by_login(message.text)

            if player:
                await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                return

            player = await repo.create(message.text)
            await message.answer(f'–ì–æ—Ç–æ–≤—å —Å–≤–æ–∏ –±–∞–±–∫–∏ üí≤ {player.login}', reply_markup=None)
