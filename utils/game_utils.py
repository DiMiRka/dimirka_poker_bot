import pandas as pd
import matplotlib.pyplot as plt

from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.fsm.context import FSMContext

from keyboards import (input_player_game_kb, start_game_kb, game_keyboards, purchase_players_keyboards,
                       exit_players_keyboards, main_kb, game_admin_keyboards, change_purchase_players_keyboards,
                       back_players_keyboards, extra_players_keyboards)
from create_bot import bot
from services import create_game_db, get_players_db, update_game_db

pd.set_option('display.max_columns', None)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã pandas
game_users = list()  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

start_status = False  # –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
player_list = list()  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
player_out_list = list()  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
text_players = str()  # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∏–≥—Ä–µ
date = str()  # –î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
game_id = int()  # id —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
count = int()  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏—à–∫–∏ –∫ —Ä—É–±–ª—é —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
game_data = dict()  # –ü—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
add_bank_player = str()  # –£—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–∫—É–ø–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
out_player = str()  # –£—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã


def player_input(text):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    global player_list, text_players, date, game_users, game_data
    if text == '–Ω–æ–≤–∞—è –∏–≥—Ä–∞':
        '''–û–±–Ω–æ–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ'''
        player_list = list()
        text_players = str()
        date = str()
        game_users = list()
        game_data = dict()
    else:
        player_list.append(text)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
        text_players += f'\n{text}'  # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∏–≥—Ä–µ


async def update_users():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global game_users
    users = await get_players_db()
    game_users = [user.login for user in users]


async def get_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return game_users


async def update_count(c: int):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏—à–∫–∏ –∫ —Ä—É–±–ª—é —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    global count
    count = c


async def get_count():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏—à–∫–∏ –∫ —Ä—É–±–ª—é —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    return count


async def get_players():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    return player_list


def get_players_text():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ"""
    return text_players


async def update_add_on_player(call: CallbackQuery):
    global add_bank_player
    add_bank_player = call.data[6:]


async def update_change_on_player(call: CallbackQuery):
    global add_bank_player
    add_bank_player = call.data[9:]


async def update_out_layer(call: CallbackQuery):
    global out_player
    out_player = call.data[6:]


async def input_players_start(call: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º"""
    if call.data.startswith('—Ñ–∏—à–∫–∞'):
        new_keyboards = input_player_game_kb(game_users=game_users, player_list=player_list, start=start_status)
        await call.message.answer(text='–ö—Ç–æ –∏–≥—Ä–∞–µ—Ç?', reply_markup=await new_keyboards)
    else:
        player_input(call.data[14:])
        new_keyboards = input_player_game_kb(game_users=game_users, player_list=player_list, start=start_status)
        await call.message.answer(text=f'–í –∏–≥—Ä–µ: {text_players}', reply_markup=await new_keyboards)


async def input_players(call: CallbackQuery):
    """"–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    new_keyboards = input_player_game_kb(game_users=game_users, player_list=player_list, start=start_status)
    await call.message.answer(text=f'–ö—Ç–æ —ç—Ç–∞ –∂–µ—Ä—Ç–≤–∞?üëÄ', reply_markup=await new_keyboards)


async def input_players_game(call: CallbackQuery):
    """"–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    player_input(call.data[13:])
    game_data[call.data[13:]] = {'–ó–∞–∫—É–ø,—Ñ—à.': 1000, '–ó–∞–∫—É–ø,—Ä—É–±.': 1000 * count, '–°—Ç–∞—Ç—É—Å': '–í –∏–≥—Ä–µ', '–§–∏—à–∫–∏': 0, '–†—É–±.': 0}
    photo = FSInputFile('utils/game_image.png')
    text = await text_game()
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo, reply_markup=await game_keyboards(call.from_user.id), caption=text,
                         show_caption_above_media=True)


async def add_on_players(call: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–∫—É–ø–∞ —Ñ–∏—à–µ–∫ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    await call.message.answer(text='–ö—Ç–æ –≤ –ø—Ä–æ—ë–±–µ?', reply_markup=await purchase_players_keyboards(player_list))


async def add_on_utils(call: CallbackQuery):
    """–î–æ–∫—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫—É —Ñ–∏—à–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ"""
    chips = call.data.split()[1]
    player = add_bank_player
    game_data[player]['–ó–∞–∫—É–ø,—Ñ—à.'] = game_data[player].get('–ó–∞–∫—É–ø,—Ñ—à.') + int(chips)
    game_data[player]['–ó–∞–∫—É–ø,—Ä—É–±.'] = game_data[player].get('–ó–∞–∫—É–ø,—Ä—É–±.') + int(chips) * count
    photo = FSInputFile('utils/game_image.png')
    text = await text_game()
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo, reply_markup=await game_keyboards(call.from_user.id), caption=text,
                         show_caption_above_media=True)


async def start_out_player(call: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    await call.message.answer(text='–ö—Ç–æ –ø–æ —Å—ä–µ–±–∞–º?', reply_markup=await exit_players_keyboards(player_list))


async def player_out_game(call: CallbackQuery):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã"""
    await update_out_layer(call)
    player_out_list.append(out_player)
    player_list.remove(out_player)
    await call.message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –Ω–∞ –∫–∞—Ä–º–∞–Ω–µ?', reply_markup=None)


async def result_chips(message: Message, state: FSMContext):
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ–¥—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –í—ã—à–µ–ª"""
    global start_status, out_player
    if start_status:  # –í —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
        await state.clear()
        chips = int(message.text)
        game_data[out_player]['–°—Ç–∞—Ç—É—Å'] = '–í—ã—à–µ–ª'
        game_data[out_player]['–§–∏—à–∫–∏'] = chips
        game_data[out_player]['–†—É–±.'] = (chips * count) - game_data[out_player].get('–ó–∞–∫—É–ø,—Ä—É–±.')
        photo = FSInputFile('utils/game_image.png')
        text = await text_game()
        await bot.send_photo(chat_id=message.chat.id, photo=photo, reply_markup=await game_keyboards(message.from_user.id), caption=text,
                             show_caption_above_media=True)
    else:  # –í —Å–ª—É—á–∞–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        chips = int(message.text)
        game_data[out_player]['–°—Ç–∞—Ç—É—Å'] = '–í—ã—à–µ–ª'
        game_data[out_player]['–§–∏—à–∫–∏'] = chips
        game_data[out_player]['–†—É–±.'] = (chips * count) - game_data[out_player].get('–ó–∞–∫—É–ø,—Ä—É–±.')
        if player_list:  # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã –¥–æ –≤—ã—Ö–æ–¥–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            out_player = player_list.pop(0)
            await message.answer(text=f'{out_player} –Ω–∞ –∫–∞—Ä–º–∞–Ω–µ:')
        else:  # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –æ–∫–æ–Ω—á–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
            await update_game_db(game_data, game_id)
            await state.clear()
            text = await text_game()
            text += '\n–ò–¢–û–ì–ò üí∞'
            photo = FSInputFile('utils/game_image.png')
            await bot.send_photo(chat_id=message.chat.id, photo=photo, reply_markup=None, caption=text,
                                 show_caption_above_media=True)
            await message.answer(text='–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞, –±—Ä–∞—Ç ü§ô', reply_markup=await main_kb(message.from_user.id))


async def text_start():
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∏–≥—Ä—ã"""
    text = '–ù—É –ø–æ–ª–µ—Ç–µ–ª–∏ üé∞\n-------------------'
    text += f'\n1 —Ñ–∏—à–∫–∞ = {count} —Ä—É–±.\n-------------------\n–í –∏–≥—Ä–µ:'
    for player in player_list:
        text += f'\n{player}'
    return text


async def start_game(call: CallbackQuery):
    """–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
    for player in player_list:
        game_data[player] = {'–ó–∞–∫—É–ø,—Ñ—à.': 1000, '–ó–∞–∫—É–ø,—Ä—É–±.': 1000 * count, '–°—Ç–∞—Ç—É—Å': '–í –∏–≥—Ä–µ',
                             '–§–∏—à–∫–∏': 0, '–†—É–±.': 0}
    text = await text_start()
    await call.message.answer(text=text, reply_markup=await start_game_kb())


async def text_game():
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã"""
    text = f'–ò–≥—Ä–∞ {date}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 1 –∫ {count}'
    table_game = dict()
    for key in game_data.keys():
        table_game.setdefault('–ò–≥—Ä–æ–∫', []).append(key)
        for k, v in game_data.get(key).items():
            table_game.setdefault(k, []).append(v)
    tb = pd.DataFrame.from_dict(table_game)
    fig, ax = plt.subplots(figsize=(10, 5))
    fig.set_size_inches(6, 4)
    fig.canvas.manager.full_screen_toggle()
    fig.set_facecolor('#4f4f4f')
    ax.axis('tight')
    ax.axis('off')
    ax.table(cellText=tb.values,
             colLabels=tb.columns,
             loc='center',
             cellLoc='center',
             rowLoc='center',
             colColours=['YellowGreen'] * 6)
    plt.savefig(f'utils/game_image.png', bbox_inches='tight')
    print(tb)
    return text


async def game_utils(call: CallbackQuery):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–≥—Ä—ã"""
    global start_status, date, game_id
    if not start_status:
        date, game_id = await create_game_db(count=count)
        text = await text_game()
        photo = FSInputFile('utils/game_image.png')
        start_status = True
        await bot.send_photo(chat_id=call.message.chat.id, photo=photo, reply_markup=await game_keyboards(call.from_user.id), caption=text,
                             show_caption_above_media=True)
    else:
        pass


async def game_end_start(call: CallbackQuery):
    """–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    global start_status, out_player
    if start_status:
        out_player = player_list.pop(0)
        start_status = False
        await call.message.answer(f'–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ üòâ\n–£ {out_player} –Ω–∞ –∫–∞—Ä–º–∞–Ω–µ:', reply_markup=None)


async def admin_board_game(call: CallbackQuery):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã"""
    await call.message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?', reply_markup=await game_admin_keyboards())


async def change_purchase_players(call: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –∑–∞–∫—É–ø–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã"""
    await call.message.answer(text='–ö—Ç–æ?', reply_markup=await change_purchase_players_keyboards(player_list))


async def change_purchase_utils(message: Message):
    """–ü–æ–º–µ–Ω—è—Ç—å –∏–≥—Ä–æ–∫—É –¥–æ–∫—É–ø –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ"""
    chips = message.text
    player = add_bank_player
    game_data[player]['–ó–∞–∫—É–ø,—Ñ—à.'] = int(chips)
    game_data[player]['–ó–∞–∫—É–ø,—Ä—É–±.'] = int(chips) * count
    photo = FSInputFile('utils/game_image.png')
    text = await text_game()
    await bot.send_photo(chat_id=message.chat.id, photo=photo, reply_markup=await game_keyboards(message.from_user.id), caption=text,
                         show_caption_above_media=True)


async def game_back_player(call: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–µ—Ä–Ω–µ–º –≤ –∏–≥—Ä—É"""
    await call.message.answer(text='–ö—Ç–æ?', reply_markup=await back_players_keyboards(player_out_list))


async def game_back_player_end(call: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    player = call.data.split()[1]
    player_out_list.remove(player)
    game_data[player]['–°—Ç–∞—Ç—É—Å'] = '–í –∏–≥—Ä–µ'
    game_data[player]['–§–∏—à–∫–∏'] = 0
    game_data[player]['–†—É–±.'] = 0
    photo = FSInputFile('utils/game_image.png')
    text = await text_game()
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo, reply_markup=await game_keyboards(call.from_user.id),
                         caption=text,
                         show_caption_above_media=True)


async def out_extra_player(call: CallbackQuery):
    """–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    await call.message.answer(text='–ö—Ç–æ?', reply_markup=await extra_players_keyboards(player_list))


async def delete_extra_player(call: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã"""
    player = call.data.split()[1]
    player_list.remove(player)
    del game_data[player]
    photo = FSInputFile('utils/game_image.png')
    text = await text_game()
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo, reply_markup=await game_keyboards(call.from_user.id),
                         caption=text,
                         show_caption_above_media=True)
